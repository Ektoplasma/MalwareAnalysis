import base64
import re
import sys

import oledump
import olefile

import os

base64_regex = r"([0-9A-Za-z+/]{64,}={0,2})"
url_regex = r"(https?://[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]{2,})+(?:[/?][a-zA-Z-0-9?/:&+_\-=.]+)?)"

repo = sys.argv[1]
urls = []
nb_good = 0
for filename in os.listdir(repo):
    ole = olefile.OleFileIO(open(os.path.join(repo,filename), 'rb').read())
    olestreams = oledump.OLEGetStreams(ole)
    i = 0
    #_, name, type, stream
    for _, name, entry_type, stream in olestreams:
        try:
            b64data = re.findall(base64_regex, stream)
            ok = 0
            
            if len(b64data) > 0 and len(b64data[0]) > 500:
                print("Checking potential stream candidata : [%d] %s" % (i,name))
                b64data = b64data[0]

                # Adds padding just in case
                b64data += "=="

                # Emotet malicious powershell always starts with "<# SoMeNAme", 
                # and "<#..." in unicode is, once encoded, "PAAjA..."
                # So the code is looking for P and A in order to find the junky subset to remove
                subset = b64data.split("P")[1].split("A")[0]

                if len(subset) > 0:
                    while subset in b64data:
                        b64data = b64data.replace(subset,"")

                data = base64.b64decode(b64data)
                data = data.decode("utf16")

                for url in re.findall(url_regex, data):
                    if "https://www.microsoft.com/" not in url:
                        urls.append(url)
                        #print(url)
                nb_good += 1

        except Exception as e:
            import traceback
            traceback.print_exc(e)
        i += 1

print("Number of good candidates:%d" % nb_good)

with open("found_unique_urls.txt", "w") as furls:
    urls = set(urls)
    for url in urls:
        furls.write(url)
        furls.write("\n")