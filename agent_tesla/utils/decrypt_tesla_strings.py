import base64
import sys
import struct
from Crypto.Cipher import AES

class AESCipher(object):

    def __init__(self, enc, key, iv): 
        self.bs = 32
        self.key = key
        self.iv = iv
        self.enc = enc

    def decrypt(self):
        cipher = AES.new(self.key, AES.MODE_CBC, self.iv)
        return self._unpad(cipher.decrypt(self.enc))

    @staticmethod
    def _unpad(s):
        return s[:-ord(s[len(s)-1:])]

if __name__ == "__main__":
    with open(sys.argv[1], "rb") as cipher_object:
        cipher = cipher_object.read()

    strings = []
    tmp = 0
    len_cipher = len(cipher)
    print("Recovering Agent Tesla strings...")
    while tmp < len_cipher:

        length = struct.unpack("<I", cipher[tmp:tmp+4])[0]
        tmp += 4
        data = cipher[tmp:tmp+length*4]
        tmp += length * 4
        key = data[0:32]
        iv = data[32:32+16]
        sub_cipher = data[32+16:]

        strings.append(
            AESCipher(sub_cipher, key, iv).decrypt()
            )
        
    with open("strings.txt","wb") as out:
        for string in strings:
            out.write(string + "\n".encode()) 
        print("Strings recovered:%s" % (len(strings)))